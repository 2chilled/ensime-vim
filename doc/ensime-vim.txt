*ensime-vim.txt*  An ensime wrapper

Author:  Olivier 'yazgoo' Abdesselam
         Jorge Vicente Cantero (jvican)
License: Same terms as Vim itself (see |license|)

This plugin is only available if 'compatible' is not set.

INTRODUCTION                                    *ensime-vim*

ensime-vim is a plugin for using Ensime with vim:
https://github.com/ensime/ensime-server

The Ensime server is meant to be an IDE for text editors.
It allows you to have access to plenty of useful IDE 
features while working with your preferred text editor.
It's meant to support both Java and Scala and it is
platform agnostic.

ENSIME FEATURES                                 *ensime-features*

This plugin is currently under development and hence some
features are not supported (mainly, most of the refactorings).
If you want to check those that are implemented, check *ensime-commands*.

Hard work is being done in this area and soon those missing features
will be available for any vim user.

COMMANDS                                        *ensime-commands*

These commands are local to the buffers in which they work.
They should be ran from

:EnClasspath            generates classpath for ensime and launch ensime-server
:EnType                 displays type under cursor
:EnSymbol               displays the path where the symbol under cursor was declared
:EnDeclaration          open buffer where the symbol under cursor was declared
:EnDeclarationSplit     split window where the symbol under cursor was declared
:EnDocUri               displays documentation url under cursor
:EnDocBrowse            launch $BROWSER (env variable) documentation url
:EnTypeCheck            launch a check on current file (launched on save)
:EnToggleFullType       set ensime to return either shallow types or full types
:EnCompleteFunc         get an omnicompletion menu (via ctrl+X ctrl+O) - blocking
:EnFormatSource         format file based (see https://github.com/ensime/ensime-emacs/wiki/Scalariform-Preferences)
:EnSetBreak             add a breakpoint on current line
:EnRename               add a breakpoint on current line
:EnClearBreaks          remove all breakpoints
:EnDebug class          start debugging the specified class
:EnContinue             continue debugging after pause
:EnBacktrace            show backtrace when execution is paused in a new buffer

CUSTOMIZING


If you want to use another highlight style for error, use:

    :let EnErrorStyle='YourHighlight'

For example:

    :let EnErrorStyle='Underlined'

UPGRADING ENSIME SERVER

To upgrade ensime server, just do:

    $ rm -rf ~/.config/classpath_project_ensime

Restart vim en run EnClasspath
